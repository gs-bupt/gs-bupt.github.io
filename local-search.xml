<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Zotero:文献管理</title>
    <link href="/2023/06/26/Zotero-%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2023/06/26/Zotero-%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>git基本使用</title>
    <link href="/2023/06/24/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/06/24/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="Git分布式版本控制工具">Git分布式版本控制工具</h2><h3 id="Git简介">Git简介</h3><p>Git是用C语言开发的分布式版本控制系统，所谓版本控制系统，就是可以储存一个文件在不同时间的版本，记录每次文件的改动，可以根据需要，随时切换到之前的版本(比如在编写Word文档的过程中，能记录下你每一次保存下来的记录，如果你对于现在的修改不满意，就可以回退到之前保存的版本)。为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。下面是Git的一些基础：</p><ul class="lvl-0"><li class="lvl-2"><p>直接记录快照，而非差异比较<br>Git 把数据看作是对小型文件系统的一组快照。 每次提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。</p></li><li class="lvl-2"><p>近乎所有操作都是本地执行在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。</p></li><li class="lvl-2"><p>Git 保证完整性<br>Git 中所有数据在存储前都计算校验和，然后以校验和来引用。不可能在 Git 不知情时更改任何文件内容或目录内容。</p></li><li class="lvl-2"><p>Git 一般只添加数据你执行的 Git 操作，几乎只往 Git 数据库中增加数据。 很难让 Git 执行任何不可逆操作，或者让它以任何方式清除数据。 同别的 VCS 一样，未提交更新时有可能丢失或弄乱修改的内容；但是一旦你提交快照到 Git 中，就难以再丢失数据，特别是如果你定期的推送数据库到其它仓库的话。</p></li><li class="lvl-2"><p>Git只能跟踪文本文件的改动<br>Git只能跟踪文本文件的改动，比如TXT文件、网页、程序代码等等。关于二进制文件，可以由Git进行管理，但是无法跟踪文件的变化。</p></li></ul><h3 id="Git安装">Git安装</h3><h4 id="Linux安装">Linux安装</h4><p>如果你想在 Linux 上用二进制安装程序来安装 Git，可以使用发行版包含的基础软件包管理工具来安装。 如果以 Fedora 上为例，你可以使用 yum：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum install git<br></code></pre></td></tr></table></figure><p>如果你在基于 Debian 的发行版上，请尝试用 apt-get：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install git<br></code></pre></td></tr></table></figure><h4 id="Windows安装">Windows安装</h4><p>通过Git官网下载，一步步安装即可。</p><h3 id="Git配置文件位置">Git配置文件位置</h3><p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ol><li class="lvl-3"><p>/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的 git config 时，它会从此文件读写配置变量。</p></li><li class="lvl-3"><p>~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git 读写此文件。</p></li><li class="lvl-3"><p>当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。</p></li></ol><p>每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。</p><h3 id="配置用户信息">配置用户信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置全局用户名和邮箱</span><br>git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@example.com&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 配置当前仓库用户名和邮箱</span><br>git config user.name <span class="hljs-string">&quot;gitlab’s Name&quot;</span> <br>git config user.email <span class="hljs-string">&quot;gitlab@xx.com&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">git config --list   <span class="hljs-comment"># 查看配置列表</span><br></code></pre></td></tr></table></figure><h3 id="创建版本库">创建版本库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> learngit      <span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-built_in">cd</span> learngit         <span class="hljs-comment"># 切换到新建的文件夹</span><br>git init            <span class="hljs-comment"># 创建一个空的Git仓库或重新初始化已有仓库</span><br></code></pre></td></tr></table></figure><h3 id="Git中文件的三种状态">Git中文件的三种状态</h3><p>Git中的文件存在三种状态，已提交（committed）、已修改（modified）和已暂存（staged）。</p><ul class="lvl-0"><li class="lvl-2"><p>已提交(committed): 表示数据已经安全的保存在本地数据库中。</p></li><li class="lvl-2"><p>已修改(modified): 表示修改了文件，但还没保存到数据库中。</p></li><li class="lvl-2"><p>已暂存(staged): 表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</p></li></ul><p>由此引入 Git 项目中三个工作区域的概念: Git 仓库、工作目录以及暂存区域。</p><ul class="lvl-0"><li class="lvl-2"><p>工作目录(Working Directory): 工作目录是对项目的某个版本独立提取出来的内容。这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p></li><li class="lvl-2"><p>暂存区域(Staging Area): 暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作&quot;索引&quot;，不过一般说法还是叫暂存区域。</p></li><li class="lvl-2"><p>Git仓库(Repository): Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p></li></ul><p>如果 Git 目录中保存着的特定版本文件，就属于已提交状态。 如果作了修改并已放入暂存区域，就属于已暂存状态。 如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。</p><img src="/2023/06/24/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image.png" class="" title="Alt text"><h3 id="查看工作目录当前状态">查看工作目录当前状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看状态报告</span><br>git status<br><span class="hljs-comment"># 更为紧凑的格式输出</span><br>git status -s<br>git status --short<br></code></pre></td></tr></table></figure><h3 id="跟踪新文件">跟踪新文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 添加内容到暂存区域(.git文件夹中index文件)</span><br>git add &lt;file&gt;<br><span class="hljs-comment"># 将当前目录所有文件添加到暂存区域</span><br>git add .<br><span class="hljs-comment"># 当前项目下的所有更改</span><br>git add --all <br></code></pre></td></tr></table></figure><p>可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态等</p><h3 id="查看已暂存和未暂存的修改">查看已暂存和未暂存的修改</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 比较工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。</span><br>git diff<br><span class="hljs-comment"># 比较暂存区域和本地仓库之间的差异，也就是暂存之后还未提交起来的变化内容</span><br>git diff --cached<br><span class="hljs-comment"># Git 1.6.1 及更高版本查看已暂存的将要添加到下次提交里的内容</span><br>git diff --staged<br></code></pre></td></tr></table></figure><h3 id="提交修改">提交修改</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">git commit <br><span class="hljs-comment"># 将提交信息与命令放在同一行</span><br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br><span class="hljs-comment"># 跳过使用暂存区域，自动把所有已经跟踪过的文件暂存起来一并提交</span><br>git commit -a -m <span class="hljs-string">&quot;added new benchmarks&quot;</span><br></code></pre></td></tr></table></figure><h3 id="移除文件">移除文件</h3><p>要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 简单的从工作目录中移除文件</span><br><span class="hljs-built_in">rm</span> &lt;file&gt;<br><span class="hljs-comment"># 删除未暂存的文件，并记录此次移除文件的操作</span><br>git <span class="hljs-built_in">rm</span> &lt;file&gt; <br><span class="hljs-comment"># 将文件从Git仓库中移除，但是仍保留在当前工作目录中</span><br>git <span class="hljs-built_in">rm</span> --cached &lt;file&gt;<br></code></pre></td></tr></table></figure><h3 id="移动文件">移动文件</h3><p>Git不会显式跟踪文件移动操作，如果重命名了某个文件，仓库中存储的元数据并不会体验出这是一次改名操作。如果直接修改文件名称，使用<code>git status</code>命令后，会显示如下信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">On branch master<br>Changes not staged <span class="hljs-keyword">for</span> commit:<br>(use <span class="hljs-string">&quot;git add/rm &lt;file&gt;...&quot;</span> to update what will be committed)<br>(use <span class="hljs-string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="hljs-keyword">in</span> working directory)<br>        deleted:    oldfilename<br><br>Untracked files:<br>(use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="hljs-keyword">in</span> what will be committed)<br>    newfilename<br></code></pre></td></tr></table></figure><p>接着使用<code>git add .</code>将修改记录添加至暂存区，此时再使用<code>git status</code>，可以看到Git成功识别到了改名操作。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">On branch master<br>Changes to be committed:<br>(use <span class="hljs-string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)<br>        renamed:    oldfilename -&gt; newfilename<br></code></pre></td></tr></table></figure><p>Git给出了一个mv命令，在需要对文件进行改名时，可以使用<code>git mv file_from file_to</code>，使用此命令修改文件名字后，与上面的效果相同。其实，运行 git mv 就相当于运行了下面三条命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mv</span> file_from file_to<br>git <span class="hljs-built_in">rm</span> file_from<br>git add file_to<br></code></pre></td></tr></table></figure><h3 id="查看提交历史">查看提交历史</h3><p>使用最简单而又有效的工具是<code>git log</code>命令。在项目中运行<code>git log</code>，可以看到下面的输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">log</span><br>commit ca82a6dff817ec66f44342007202690a93763949<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Mon Mar 17 21:52:11 2008 -0700<br><br>    changed the version number<br><br>commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Sat Mar 15 16:40:33 2008 -0700<br><br>    removed unnecessary <span class="hljs-built_in">test</span><br><br>commit a11bef06a3f659402fe7563abf99ad00de2209e6<br>Author: Scott Chacon &lt;schacon@gee-mail.com&gt;<br>Date:   Sat Mar 15 10:31:28 2008 -0700<br><br>    first commit<br></code></pre></td></tr></table></figure><p>下面是一些查看提交历史的简单命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 默认不用任何参数会按提交时间列出所有的更新，最近的更新排在最上面。</span><br>git <span class="hljs-built_in">log</span><br><span class="hljs-comment"># -p 用来显示每次提交的内容差异，可以加上 -2 来仅显示最近两次提交。</span><br>git <span class="hljs-built_in">log</span> -p -2<br><span class="hljs-comment"># 如果你想看到每次提交的简略的统计信息，可以使用 --stat 选项。</span><br>git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span><br><span class="hljs-comment"># --pretty选项可以指定使用不同于默认格式的方式展示提交历史。</span><br><span class="hljs-comment"># 用 oneline 将每个提交放在一行显示，查看的提交数很大时非常有用。 </span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br><span class="hljs-comment"># 另外还有 short，full 和 fuller 可以用，展示的信息或多或少有些不同。</span><br><span class="hljs-comment"># format，可以定制要显示的记录格式，还有很多其他选项，可以查看 Git 文档。</span><br>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span><br></code></pre></td></tr></table></figure><h3 id="版本回退">版本回退</h3><ol><li class="lvl-3"><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>。</p></li><li class="lvl-3"><p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p></li><li class="lvl-3"><p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p></li></ol><h3 id="撤销操作">撤销操作</h3><div class="tips"><p><strong>提示</strong><br><code>git checkout</code> 这个命令承担了太多职责，既被用来切换分支，又被用来恢复工作区文件，对用户造成了很大的认知负担。Git社区发布的Git2.23版本中，引入了两个新命令 <code>git switch</code> 和 <code>git restore</code>，用以替代现在的 <code>git checkout</code>。换言之，<code>git checkout</code> 将逐渐退出历史舞台。</p></div><h4 id="重新提交-Git-仓库">重新提交(Git 仓库)</h4><p>在已经提交后，发现漏掉几个文件没有添加，或者提交信息写错了。此时可以运行带有<code>--amend</code>提交命令尝试重新提交。最终只会有一个提交，第二次提交将替代第一次提交的结果。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">git commit --amend<br>git commit --amend -m  <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure><h4 id="取消暂存的文件-暂存区域">取消暂存的文件(暂存区域)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 丢弃暂存区的修改，重新放回工作区。相当于撤销git add 操作，不影响上一次commit后对本地文件的修改，包括对文件的操作，如添加文件、删除文件。</span><br>git reset HEAD &lt;file_name&gt; <br><span class="hljs-comment"># 清空暂存区，重置工作区的版本至上一次提交前</span><br>git reset –hard HEAD <br><span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span><br>git checkout .<br></code></pre></td></tr></table></figure><h4 id="取消对文件的修改-工作目录">取消对文件的修改(工作目录)</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 将暂存区的修改重新放回工作区（包括对文件自身的操作，如添加文件、删除文件）</span><br>git restore --staged &lt;file_name&gt; <br><span class="hljs-comment"># 丢弃文件在工作目录的修改（不包括对文件自身的操作，如添加文件、删除文件）</span><br>git restore &lt;file_name&gt; <br></code></pre></td></tr></table></figure><img src="/2023/06/24/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-2.png" class="" title="Alt text"><h3 id="忽略文件">忽略文件</h3><p>文件 .gitignore 的格式规范如下：</p><ol><li class="lvl-3"><p>所有空行或者以 # 开头的行都会被 Git 忽略。</p></li><li class="lvl-3"><p>可以使用标准的 glob 模式匹配。</p></li><li class="lvl-3"><p>匹配模式可以以（/）开头防止递归。</p></li><li class="lvl-3"><p>匹配模式可以以（/）结尾指定目录。</p></li><li class="lvl-3"><p>要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。</p></li></ol><p>所谓的 glob 模式是指 sh 所使用的简化了的正则表达式。 星号 (*) 匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号 (**) 表示匹配任意中间目录，比如a/**/z 可以匹配 a/z, a/b/z 或 a/b/c/z等。</p><h3 id="远程仓库">远程仓库</h3><p>远程仓库是指托管在因特网或其他网络中的你的项目的版本库。可以同时拥有多个远程仓库，这些仓库部分拥有只读权限，部分仓库拥有读写权限。 与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。 管理远程仓库包括了解如何添加远程仓库、移除无效的远程仓库、管理不同的远程分支并定义它们是否被跟踪等等。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看远程仓库</span><br><span class="hljs-comment"># 列出指定的每一个远程服务器的简写。</span><br>git remote<br><span class="hljs-comment"># 显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</span><br>git remote -v<br><span class="hljs-comment"># 查看某一个远程仓库的更多信息， 包含远程仓库的 URL 与跟踪分支的信息、拉取到的所有远程引用等等。</span><br>git remote show &lt;remote-name&gt;<br><br><span class="hljs-comment"># 添加远程仓库</span><br><span class="hljs-comment"># 添加一个新的远程 Git 仓库，同时指定一个轻松引用的简写</span><br>git remote add &lt;shortname&gt; &lt;url&gt;<br><br><span class="hljs-comment"># 远程仓库的重命名</span><br>git remote rename oldname newname <span class="hljs-comment"># 修改远程仓库的简写名</span><br><br><span class="hljs-comment"># 移除远程仓库</span><br>git remote <span class="hljs-built_in">rm</span> remote-name<br><br><span class="hljs-comment"># 推送到远程仓库，必须将先前的推送拉取下来并合并后才可以推送</span><br>git push [remote-name] [branch-name]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第三方登陆流程</title>
    <link href="/2023/06/24/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/06/24/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Web设计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>AlexNet</title>
    <link href="/2023/06/24/AlexNet/"/>
    <url>/2023/06/24/AlexNet/</url>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>2012年，Alex Krizhevsky等人提出了AlexNet网络，并以很大的优势赢得了ImageNet2012图像识别挑战赛的冠军。同时，AlexNet是第⼀个在⼤规模视觉竞赛中击败传统计算机视觉模型的⼤型神经⽹络。</p><h2 id="网络结构">网络结构</h2><p>AlexNet由5个卷积层、3个池化Pooling层和3个全连接层构成。</p><h2 id=""></h2>]]></content>
    
    
    <categories>
      
      <category>深度学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>即时通讯</title>
    <link href="/2023/06/22/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/"/>
    <url>/2023/06/22/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>实现即时通讯常见的有四种方式，分别是：轮询、长轮询(comet)、长连接(SSE)、WebSocket。</p><h2 id="介绍">介绍</h2><h3 id="轮询">轮询</h3><p>拉模式，不管服务端数据有无更新，客户端利用Ajex定时发送请求拉取一次数据，可能有更新数据返回，也可能什么都没有。<br><strong>优点</strong>: 后端编码简单<br><strong>缺点</strong>: 数据延迟、消耗资源过大、请求次数太多</p><img src="/2023/06/22/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/image.png" class="" title="轮询"><h3 id="长轮询-comet">长轮询(comet)</h3><p>客户端发起长轮询，如果服务端的数据没有发生变更，会hold住请求，直到服务端的数据发生变化，或者等待一定时间超时才会返回。返回后，客户端再发起下一次长轮询请求监听。<br><strong>优点</strong>:</p><ul class="lvl-0"><li class="lvl-2"><p>相较于轮询基本不存在消息延迟，请求次数降低很多</p></li><li class="lvl-2"><p>长轮询是在 XMLHttpRequest 之后实现的，它几乎得到了设备的普遍支持，因此通常很少需要有进一步的备选方案，在很多场景下，可以作为即时通信的最简单实现方案和兜底兼容方案。</p></li></ul><p><strong>缺点</strong>:服务器一直保持连接会消耗资源，需要同时维护多个线程，而服务器所能承载的 TCP 连接是有上限的，所以这种轮询很容易导致连接上限。</p><img src="/2023/06/22/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/image-2.png" class="" title="长轮询"><h3 id="长连接-SSE">长连接(SSE)</h3><p>客户端和服务端建立连接后不进行断开，之后客户端再次访问这个服务端上的内容时，继续使用这一条连接通道<br><strong>优点</strong>: 消息即时到达，不发无用请求<br><strong>缺点</strong>: 与长轮询一样，服务器一直保持连接是会消耗资源的，如果有大量的长连接的话，对于服务器的消耗是巨大的，而且服务器承受能力是有上限的，不可能维持无限个长连接。</p><img src="/2023/06/22/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/image-3.png" class="" title="SSE"><h3 id="WebSocket">WebSocket</h3><p>客户端向服务器发送一个携带特殊信息的请求头（Upgrade:WebSocket ）建立连接，建立连接后双方即可实现自由的实时双向通信。<br><strong>优点</strong>:</p><ul class="lvl-0"><li class="lvl-2"><p>较少的控制开销。在连接创建后，服务器和客户端之间交换数据时，用于协议控制的数据包头部相对较小。</p></li><li class="lvl-2"><p>更强的实时性。由于协议是全双工的，所以服务器可以随时主动给客户端下发数据。相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少；即使是和Comet等类似的长轮询比较，其也能在短时间内更多次地传递数据。</p></li><li class="lvl-2"><p>保持连接状态。与HTTP不同的是，Websocket需要先创建连接，这就使得其成为一种有状态的协议，之后通信时可以省略部分状态信息。而HTTP请求可能需要在每个请求都携带状态信息（如身份认证等）。</p></li></ul><p><strong>缺点</strong>: 相对来说，开发成本和难度更高。例如，当连接终止时，WebSockets 无法自动恢复连接。</p><img src="/2023/06/22/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/image-4.png" class="" title="WebSocket"><h2 id="长轮询">长轮询</h2><p>长轮询挂起请求，等待新数据更新后再响应的处理方式虽然能减少浏览器的请求次数，并带来即时性，但是如果使用同步处理请求的方式，挂起请求则代表了线程的阻塞，有多少长轮询请求未响应就代表要阻塞多少个Servlet线程。所以长轮询必须使用异步处理方式。</p><p>流程:</p><ul class="lvl-0"><li class="lvl-2"><p>请求发送到服务器。</p></li><li class="lvl-2"><p>服务器在有新数据之前不会响应请求。</p></li><li class="lvl-2"><p>当新数据出现、或超过预设等待时间时，服务器将对其请求作出响应。</p></li><li class="lvl-2"><p>浏览器立即发出一个新的请求。</p></li></ul><img src="/2023/06/22/%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/image-5.png" class="" title="异步处理请求"><p>如上图，在主线程中开启异步处理，主线程将请求交给其他线程去处理，主线程就结束了，被放回了主线程池，由其他线程继续处理请求，可以避免主线程池线程耗尽，起到容器线池程和工作线程池隔离的效果。</p><h2 id="案例描述">案例描述</h2><p>用户在网页使用微信扫码登陆，使用手机app扫码后微信服务器向后端服务器回调扫码事件，由于前端无法感知到用户手机扫码的行为，所以停留在扫码登陆页面时需要持续轮询后端服务器用户是否已扫码登录，造成服务器的较大压力，于是利用Servlet3.0的异步特性，实现长轮询的方式来通信。</p><p>前端的扫码登录页面向后端请求微信登录二维码，后端返回微信登录二维码给前端时附带随机生成的scene_id，前端显示二维码供用户手机微信扫码，前端持续轮询后端用户是否已扫码（上一次轮询未成功登陆为开启下一次轮询的条件），但需带上scene_id以区分扫码用户，此时后端不同步返回前端请求结果，而是以异步响应式的方式等待微信服务器回调后，或是超过指定时间例如30秒后再返回（可能用户打开登陆页面后停留但未成功扫码），大大减少了前端访问后端的次数。</p><p>编辑时间</p>]]></content>
    
    
    <categories>
      
      <category>Web设计</category>
      
      <category>Web</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+github</title>
    <link href="/2023/06/22/hexo-github/"/>
    <url>/2023/06/22/hexo-github/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo简介">Hexo简介</h2><p>​Hexo是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="Hexo-结构">Hexo 结构</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">.<br>├── _config.yml                     <br>├── package.json<br>├── public                   // 公共文件夹，这个文件夹用于存放生成的站点文件。<br>├── scaffolds                // 模板文件夹，存储page、draft、page的模板<br>├── source                   // 资源文件夹，这个文件夹用来存放内容。<br>|   ├── _drafts                     <br>|   └── _posts<br>└── themes<br></code></pre></td></tr></table></figure><h2 id="Hexo-写作">Hexo 写作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new [layout] &lt;title&gt;  # 创建一篇新文章或者新页面<br></code></pre></td></tr></table></figure><p>layout: 文章的布局，通过_config.yml中的default_layout参数指定默认布局</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">git init<br>git add .<br>git commit -m &quot;first commit&quot;<br>git branch -M main<br>git remote <br>git <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
